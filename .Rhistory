asd
class(c(4, TRUE))
x <- c(1,2,3); y <- c(4,5,6)
rbind(x,y)
x <- list(2, True, "asd")
x <- list(2, T, "asd")
x[[1]]
class(x[[1]])
x <- 1:4; y <- 2
x + y
x <- c(17, 14, 4, 5, 13, 12, 10)
read.csv("hw1_data.csv")
add2(3,5)
setwd("~/Google Drive/Classes/Online Classes/Coursera The Data Scientist's Toolbox/datasciencecoursera")
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "sulfate", 1:10)
source("pollutantmean.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "nitrate", 23)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
submit()
submit()
submit()
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
submit()
submit()
submit()
source("corr.R")
cr <- corr("specdata", 150)
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
submit
submit()
submit()
submit()
swirl()
library(swirl)
swirl()
x <- c(44, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
is.na(my_data)
my_na <- is.na(my_data)
print(my_na)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x>0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar]
vect["bar"]
vect[c("foo", "bar")]
my_vector <- [1:20]
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector <- c(4,5))
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matric <- my_vector
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
5 != 7
!(5 == 7)
FASLE & FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 ==6, !FALSE)
ints <- sample(10)
sample
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
submit()
swirl()
submit()
swirl()
help()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sahpe_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
quit()
c
exit()
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data("iris")
data(iris)
?iris
lapply(Sepal$Length, Iris$virginica, mean)
lapply(Sepal$Length, iris$virginica, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris, 2, mean)
apply(iris[2, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
with(mtcars, tapply(mpg, cyl, mean))
26.66364 - 15.1
debug(ls)
ls
ls()
quit()
exit()
tapply(mtcars$mpg, mtcars$cyl, mean)
swirl()
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement=TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace=TRUE, prob = c(0.3, 0.7))
flips
sum(flips==1)
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, lambda = c(10))
rpois(5, lambda = 10)
my_pois(replicate(100, rpois(5, lambda = 10)))
my_pois <- replicate(100, rpois(5, lambda = 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 = Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars$speed, cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$dist, y = cars$speed, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
plot(cars, pch = 2)
library(mtcars)
load(mtcars)
mtcars
data(mtcars)
?poxplot()
?boxplot()
?boxplot
boxplot(data = mtcars, mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
outcome[,11] <- as.numeric(outcome[,11])
hist(outcome[,11])
str(outcome)
?suppressWarnings
source("best.R")
best("TX", "heart attack")
submit()
set.seed(1)
rpois(5, 2)
?ppois
?rpois
c <- c(1,2,3)
length(c)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(swirl)
ls()
rm(list=ls())
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
1/13
0
3/13
2/51
.614
0.614
(1.6*.8)/2
.64
mypdf
?integrate
integrate(mypdf, 0, 1.6)
?quantile
quantile(mypdf)
sqrt(2)
library(swirl)
install_from_swirl("Regression Models")
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
fit <- lm(child ~ parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fi$coef[2]
ols.slope <- fit$coef[2]
lhs - rhs
all.eaual(lhs, rhs)
all.equal(lhs, rhs)
varChild <- var(child, galton)
summary(galton)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes + varEst)
efit <- lm(accel ~ mag+dist, attenu)
mean(efit$residuals)
?cov
cov(efit$residuals, attenu$mag)
cov(efit$residuals, attenu$dist)
cor(gpa_nor, gch_nor)
l_nor <- lm(child ~ parent)
l_nor <- lm(child ~ parent, galden)
l_nor <- lm(child ~ parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
f <- fit(x, x)
?fit
mean(x)
floor(200*log(2))
bb_data <- data.frame(Name = c('Mookie Betts', 'Derek Jeter', 'Mike Trout'), H = c(5,1,18),HR = c(2,0,12), AB = c(15,20,25))
bb_data$HR['Mike Trout']
bb_data$HR[3]
setwd("~/Google Drive/Classes/Online Classes/edX Sabermetrics/Sabermetrics-R-scripts")
install.packages("ggplot2")
batting = read.csv('Sabr101x PitchersB.csv')
ls()
cd ..
help
batting = read.csv('Sabr101x_PitchersB.csv')
pitching = read.csv('Sabr101x_PitchersP.csv')
SS_2000 = read.csv(file.choose())
View(SS_2000)
?ggplot
?ggplot2
?ggplot
library(ggplot2)
?"ggplot"
SS_750 <- subset(SS)
SS_750 <- subset(SS_2000, (OBP + SLG) > 750)
SS_750 <- subset(SS_2000, (OBP + SLG) > .750)
View(SS_750)
ggplot(SS_2000)
my_plot <- ggplot(SS_2000, aes(SB, Fld))
my_plot <- my_plot + geom_point(color='red')
my_plot <- my_plot + stat_smooth(lm, y ~ x)
example("stat_smooth")
my_plot <- my_plot + stat_smooth(method="lm", formula = y ~ x)
my_plot
?read.csv
read.csv("2001_MLB_SS.csv")
?merge
SS_2001 <- read.csv("2001_MLB_SS.csv")
merge(SS_2000, SS_2001)
merge(SS_2000, SS_2001, by=intersect("Name"))
merge(SS_2000, SS_2001, by=intersect(playerID))
merge(SS_2000, SS_2001, by=intersect(playerID, playerID))
merge(SS_2000, SS_2001, by=intersect(SS_2000$playerID, SS_2001$playerID))
merge(SS_2000, SS_2001, by.x = "playerID", by.y = "playerID")
merge(SS_2000, SS_2001, by.x = "Name", by.y = "Name")
merge(SS_2000, SS_2001, by.x = playerID, by.y = playerID)
merge(SS_2000, SS_2001, by.x = playerid, by.y = playerid)
merge(SS_2000, SS_2001, by.x = "playerid", by.y = "playerid")
SS_2000_2001 <- merge(SS_2000, SS_2001, by.x = "playerid", by.y = "playerid")
View(SS_2001)
?corr
?cor
cor(SS_2000, SS_2001)
cor(SS_2000$wRC., SS_2001$wRC.)
cor(SS_2000_2001$wRC.)
cor(SS_2000_2001$wRC., SS_2000$wRC.)
cor(SS_2000_2001, SS_2000_2001$wRC.)
cor(SS_2000_2001)
cor(SS_2000_2001$wRC..x, SS_2000_2001$wRC..y)
SS_2000_2001$Fld_Tot <- sum(SS_2000_2001$Fld.x + SS_2000_2001$Fld.y)
View(SS_2000_2001)
SS_2000_2001$Fld_Tot <- sum(SS_2000$Fld + SS_2001$Fld)
SS_2000_2001$Fld_Tot <- sum(SS_2000_2001$Fld.x)
SS_2000_2001$Fld_Tot <- sum(SS_2000_2001$Fld.x, SS_2000_2001$Fld.y)
SS_2000_2001$Fld_Tot <- SS_2000_2001$Fld.x + SS_2000_2001$Fld.y
SS_2000_lower_700_OPS <- SS_2000[(OBP + SLG) < .700]
SS_2000_lower_700_OPS <- SS_2000[(SS_2000$OBP + SS_2000$SLG) < .700]
SS_2000_lower_700_OPS <- subset(OPS, subset = OPS < .7)
SS_2000_lower_700_OPS <- subset(OPS, subset = (OBP+SLG) < .7)
SS_2000_lower_700_OPS <- subset(SS_2000, subset = (OBP+SLG) < .7)
View(SS_2000_lower_700_OPS)
View(SS_2000)
SS_2000$OPS <- SS_2000$OBP + SS_2000$SLG
View(SS_2000_lower_700_OPS)
pitchFX_Savant <- read.csv("pitch_fx_baseball_savant.csv")
head(pitchFX_Savant)
ls()
?load
load("GetPitchFXData.R")
